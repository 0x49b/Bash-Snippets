#!/usr/bin/env bash
# Author: Alexander Epstein https://github.com/alexanderepstein

currentVersion="1.15.2"
configuredClient=""
declare -a simpleOperations=(simplify factor derive integrate zeroes roots tangent area cos sin tan arccos arcsin arctan abs log)

## Allows to call the users configured client without if statements everywhere
httpGet()
{
  case "$configuredClient" in
    curl) curl -A curl -s "$@" ;;
    wget) wget -qO- "$@" ;;
    fetch) fetch -o "..." ;;
  esac
}


checkInternet()
{
  httpGet google.com > /dev/null 2>&1 || { echo "Error: no active internet connection" >&2; return 1; } # query google with a get request
}


update()
{
  # Author: Alexander Epstein https://github.com/alexanderepstein
  # Update utility version 1.2.0
  # To test the tool enter in the defualt values that are in the examples for each variable
  repositoryName="Bash-Snippets" #Name of repostiory to be updated ex. Sandman-Lite
  githubUserName="alexanderepstein" #username that hosts the repostiory ex. alexanderepstein
  nameOfInstallFile="install.sh" # change this if the installer file has a different name be sure to include file extension if there is one
  latestVersion=$(httpGet https://api.github.com/repos/$githubUserName/$repositoryName/tags | grep -Eo '"name":.*?[^\\]",'| head -1 | grep -Eo "[0-9.]+" ) #always grabs the tag without the v option

  if [[ $currentVersion == "" || $repositoryName == "" || $githubUserName == "" || $nameOfInstallFile == "" ]]; then
    echo "Error: update utility has not been configured correctly." >&2
    exit 1
  elif [[ $latestVersion == "" ]]; then
    echo "Error: no active internet connection" >&2
    exit 1
  else
    if [[ "$latestVersion" != "$currentVersion" ]]; then
      echo "Version $latestVersion available"
      echo -n "Do you wish to update $repositoryName [Y/n]: "
      read -r answer
      if [[ "$answer" == [Yy] ]] ;then
        cd  ~ || { echo 'Update Failed'; exit 1; }
        if [[ -d  ~/$repositoryName ]]; then rm -r -f $repositoryName || { echo "Permissions Error: try running the update as sudo"; exit 1; } ; fi
        git clone "https://github.com/$githubUserName/$repositoryName" || { echo "Couldn't download latest version"; exit 1; }
        cd $repositoryName ||  { echo 'Update Failed'; exit 1; }
        git checkout "v$latestVersion" 2> /dev/null || git checkout "$latestVersion" 2> /dev/null || echo "Couldn't git checkout to stable release, updating to latest commit."
        chmod a+x install.sh #this might be necessary in your case but wasnt in mine.
        ./$nameOfInstallFile "update" || exit 1
        cd ..
        rm -r -f $repositoryName || { echo "Permissions Error: update succesfull but cannot delete temp files located at ~/$repositoryName delete this directory with sudo"; exit 1; }
      else
        exit 1
      fi
    else
      echo "$repositoryName is already the latest version"
    fi
  fi
}

## This function determines which http get tool the system has installed and returns an error if there isnt one
getConfiguredClient()
{
    if  command -v curl &>/dev/null ; then
      configuredClient="curl"
    elif command -v wget &>/dev/null ; then
      configuredClient="wget"
    elif command -v fetch &>/dev/null ; then
      configuredClient="fetch"
    else
      echo "Error: This tool reqires either curl, wget, or fetch to be installed."
      return 1
    fi
}

validateExpression()
{
  local parsedExpression
  parsedExpression=$(echo $1 | grep -Eo "[0-9 + -- / * . a-Z ~ :]*")
  if [[ $parsedExpression != $1 ]];then { echo "Error: Expression contains invalid characters";return 1;}; fi
}

encodeEquation()
{
  originalEquation=$1
  equation=$(echo $originalEquation | sed "s:/:(over):g" | sed "s/~/|/g" | sed "s/-/%2D/g")
}

validateOperation()
{
  operation=$(echo $1 | tr "[[:upper:]]" "[[:lower:]]")
  validOp="false"
  for op in "${simpleOperations[@]}"; do
    if [[ "$op" == "$operation" ]]; then { opType="simple"; validOp="true"; break; }; fi
  done
  if ! $validOp; then { echo "Error: invalid operation, run newton -h to get a list of valid operations"; return 1; }; fi
  if [[ $operation == "roots" ]]; then operation=zeroes;fi
}

getSimpleResponse()
{
  result=$(httpGet https://newton.now.sh/$operation/$equation | grep -Eo '"result":"[a-Z 0-9 ( ) \^ / -- + , ]*' | sed s/'"result":"'//g)
  if [[ $result == "" ]];then { echo "Error: no result was returned, did you use valid characters?"; return 1; }; fi
}

printAnswer()
{
  cat <<EOF
================================
|Operation: $operation
|Expression: $originalEquation
|Result: $result
================================
EOF
}

usage()
{
  cat <<EOF
Newton
Description: Performs numerical calculations all the way up to symbolic math parsing.
Usage: newton [operation] [expression] or newton [flag]
  -u  Update Bash-Snippet Tools
  -h  Show the help
  -v  Get the tool version
 ===================================================
|Operations     Sample Expression      Sample Result|
|---------------------------------------------------|
|Simplify           2^2+2(2)                 8      |
|Factor             x^2 + 2x             x (x + 2)  |
|Derive              x^2+2x               2 x + 2   |
|Integrate           x^2+2x         1/3 x^3 + x^2 +C|
|Roots/Zeroes        x^2+2x                2, 0     |
|Tangent             2~x^3              12 x + -16  | (Finding tangent line when x=2 for expression x^3)
|Area               2:4~x^3                 60      | (Finding area under curve from 2 to 4 for expression x^3)
|Cos                   pi                   -1      |
|Sin                   pi                    0      |
|Tan                  pi/4                   1      |
|ArcCos                 1                    0      |
|ArcSin                 0                    0      |
|ArcTan                pi                arcsin(pi) |
|Abs                   -2                    2      |
|Log                   2~8                   3      | (Log base 2 of eight)
 ===================================================
EOF
}

checkInternet || exit 1
getConfiguredClient || exit 1

while getopts "uvh" opt; do
  case "$opt" in
    \?) echo "Invalid option: -$OPTARG" >&2
        exit 1
        ;;
    h)  usage
        exit 0
        ;;
    v)  echo "Version $currentVersion"
        exit 0
        ;;
    u)  update
        exit 0
        ;;
    :)  echo "Option -$OPTARG requires an argument." >&2
        exit 1
        ;;
  esac
done

if [[ $# == "0" ]]; then usage && exit 0
elif [[ $# == "1" ]]; then
  if [[ $1 == "update" ]]; then update && exit 0 || exit 1
  elif [[ $1 == "help" ]]; then usage && exit 0 || exit 1
  else echo "Error: newton needs two arguments, operation and expression" && exit 1;fi
elif [ $# -gt 2 ];then echo "Error: newton only accepts two arguments, operation and expression" && exit 1;fi


validateOperation $1 || exit 1
validateExpression $2 || exit 1
encodeEquation $2 || exit 1
if [[ $opType == "simple" ]];then getSimpleResponse || exit 1;fi
printAnswer

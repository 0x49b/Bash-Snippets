#!/bin/bash
# Author: Alexander Epstein https://github.com/alexanderepstein

currentVersion="1.7.0"
configuredClient=""
private="0"

## This function determines which http get tool the system has installed and returns an error if there isnt one
getConfiguredClient()
{
  if  command -v curl &>/dev/null ; then
    configuredClient="curl"
  elif command -v wget &>/dev/null ; then
    configuredClient="wget"
  elif command -v fetch &>/dev/null ; then
    configuredClient="fetch"
  else
    echo "Error: This tool reqires either curl, wget, or fetch to be installed."
    return 1
  fi

}

checkInternet()
{
  echo -e "GET http://google.com HTTP/1.0\n\n" | nc google.com 80 > /dev/null 2>&1 # query google with a get request
  if [ $? -eq 0 ]; then #check if the output is 0, if so no errors have occured and we have connected to google successfully
    return 0
  else
    echo "Error: no active internet connection" >&2 #sent to stderr
    return 1
  fi
}

## Allows to call the users configured client without if statements everywhere
httpGet()
{
  case "$configuredClient" in
    curl) curl -A curl -s "$@";;
    wget) wget -qO- "$@";;
    fetch) fetch -o "...";;
  esac
}




checkInternet()
{
  echo -e "GET http://google.com HTTP/1.0\n\n" | nc google.com 80 > /dev/null 2>&1 # query google with a get request
  if [ $? -eq 0 ]; then #check if the output is 0, if so no errors have occured and we have connected to google successfully
    return 0
  else
    echo "Error: no active internet connection" >&2 #sent to stderr
    return 1
  fi
}

update()
{
  # Author: Alexander Epstein https://github.com/alexanderepstein
  # Update utility version 1.2.0
  # To test the tool enter in the defualt values that are in the examples for each variable
  repositoryName="Bash-Snippets" #Name of repostiory to be updated ex. Sandman-Lite
  githubUserName="alexanderepstein" #username that hosts the repostiory ex. alexanderepstein
  nameOfInstallFile="install.sh" # change this if the installer file has a different name be sure to include file extension if there is one
  latestVersion=$(httpGet https://api.github.com/repos/$githubUserName/$repositoryName/tags | grep -Eo '"name":.*?[^\\]",'| head -1 | grep -Eo "[0-9.]+" ) #always grabs the tag without the v option

  if [[ $currentVersion == "" || $repositoryName == "" || $githubUserName == "" || $nameOfInstallFile == "" ]];then
    echo "Error: update utility has not been configured correctly." >&2
    exit 1
  elif [[ $latestVersion == "" ]];then
    echo "Error: no active internet connection" >&2
    exit 1
  else
    if [[ "$latestVersion" != "$currentVersion" ]]; then
      echo "Version $latestVersion available"
      echo -n "Do you wish to update $repositoryName [Y/n]: "
      read -r answer
      if [[ "$answer" == "Y" || "$answer" == "y" ]] ;then
        cd  ~ || { echo 'Update Failed' ; exit 1 ; }
        if [[ -d  ~/$repositoryName ]]; then rm -r -f $repositoryName  ||  { echo "Permissions Error: try running the update as sudo"; exit 1; } ; fi
        git clone "https://github.com/$githubUserName/$repositoryName" || { echo "Couldn't download latest version" ; exit 1; }
        cd $repositoryName ||  { echo 'Update Failed' ; exit 1 ;}
        git checkout "v$latestVersion" 2> /dev/null || git checkout "$latestVersion" 2> /dev/null || echo "Couldn't git checkout to stable release, updating to latest commit."
        chmod a+x install.sh #this might be necessary in your case but wasnt in mine.
        ./$nameOfInstallFile "update" || exit 1
        cd ..
        rm -r -f $repositoryName ||  { echo "Permissions Error: update succesfull but cannot delete temp files located at ~/$repositoryName delete this directory with sudo"; exit 1; }
      else
        exit 1
      fi
    else
      echo "$repositoryName is already the latest version"
    fi
  fi

}

getBitbucketInfo()
{
    echo -n 'Enter your Bitbucket username: '
    read username
    echo -n 'Enter your Bitbucket password: '
    read  password  # -s flag hides password text
    echo
}

backupRepo()
{
  cd ~/temp/$repoName
  if [[ $private == "1" ]];then
    httpGet --user $username:$password https://api.bitbucket.org/1.0/repositories/ --data name=$repoName$timestamp --data is_private='true' > /dev/null
  else
    httpGet --user $username:$password https://api.bitbucket.org/1.0/repositories/ --data name=$repoName$timestamp > /dev/null
  fi
    echo "Before remote"
    originalRepoName=$repoName
    repoName=$(echo $repoName | tr '[:upper:]' '[:lower:]')
    timestamp=$(echo $timestamp | tr '[:upper:]' '[:lower:]')
    git remote add origin https://$username:$password@bitbucket.org/$username/$repoName$timestamp.git > /dev/null || return 1
    echo "After remote"
    git push -q origin --all --tags > /dev/null || return 1
    git push -q origin --tags > /dev/null || return 1
    echo "Successfully backedup $originalRepoName"
    echo
    rm -rf ~/temp
}

copyRepository()
{
  timestamp=$(date | tr " " _ | tr : _  )
  mkdir ~/temp
  cd ~/temp || { rm -r ~/temp; return 1;  }
  cp -r $1 ~/temp || { rm -r ~/temp; return 1;  }
  repoName=$(ls ~/temp)
  cd $repoName || { rm -r ~/temp; return 1;  }
  rm -rf .git && git init > /dev/null
  git add -A . > /dev/null
  git commit -m "Initial commit" > /dev/null
}

getConfiguredClient || exit 1
checkInternet || exit 1
getBitbucketInfo
copyRepository $1 || { echo "Error: couldnt copy $originalRepoName to ~/temp/$repoName"; exit 1; }
backupRepo  || { echo "Error: couldnt backup $originalRepoName to bitbucket"; exit 1; }
